const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { Transaction, Budget } = require('../models');
const logger = require('../utils/logger');

const TEMP_DIR = path.join(__dirname, '../../temp');

if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

module.exports = {
  generateFinancialReport: async (userId, period = 'monthly') => {
    const reportPath = path.join(TEMP_DIR, `${userId}-report-${Date.now()}.pdf`);
    const doc = new PDFDocument();

    try {
      // Fetch data
      const [transactions, budgets] = await Promise.all([
        Transaction.findByUser(userId),
        Budget.findByUser(userId)
      ]);

      // Create PDF
      const stream = fs.createWriteStream(reportPath);
      doc.pipe(stream);

      // Header
      doc.fontSize(25).text('Financial Report', { align: 'center' });
      doc.moveDown();

      // Summary Section
      doc.fontSize(18).text('Summary', { underline: true });
      doc.fontSize(12).text(`Period: ${period}`);
      doc.text(`Total Transactions: ${transactions.length}`);
      doc.text(`Active Budgets: ${budgets.length}`);
      doc.moveDown();

      // Transactions Table
      doc.fontSize(18).text('Transactions', { underline: true });
      doc.fontSize(12);
      transactions.forEach(txn => {
        doc.text(`${txn.date.toDateString()}: $${txn.amount} - ${txn.category}`);
      });

      // Budgets Section
      doc.addPage().fontSize(18).text('Budgets', { underline: true });
      budgets.forEach(budget => {
        doc.fontSize(12).text(`${budget.category}: $${budget.limit} (${budget.timeframe})`);
      });

      // Footer
      doc.fontSize(10).text('Generated by FinanceAI', { align: 'center' });

      doc.end();

      return new Promise((resolve, reject) => {
        stream.on('finish', () => resolve(reportPath));
        stream.on('error', reject);
      });
    } catch (error) {
      logger.error(`PDF Generation Error: ${error.message}`);
      throw new Error('Failed to generate PDF report');
    }
  },

  cleanupTempFiles: () => {
    fs.readdir(TEMP_DIR, (err, files) => {
      if (err) return logger.error(`Cleanup Error: ${err.message}`);
      
      files.forEach(file => {
        const filePath = path.join(TEMP_DIR, file);
        fs.unlink(filePath, err => {
          if (err) logger.error(`File Deletion Error: ${err.message}`);
        });
      });
    });
  }
};